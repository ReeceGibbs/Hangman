{"ast":null,"code":"var _jsxFileName = \"C:\\\\Source Repo\\\\Projects\\\\Level 3\\\\Task 21\\\\hangman\\\\src\\\\components\\\\Display\\\\Display.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\nimport './Display.css';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\nimport HangmanState from '../HangmanState/HangmanState';\nimport React, { useState } from 'react';\nimport Input from '../Input/Input';\nimport dictionary from '../../assets/dictionary';\nimport { QuestionCircle } from 'react-bootstrap-icons'; //a variable to contain possible game statuses\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gameStatus = ['in_progress', 'win', 'loss'];\n\nfunction Display() {\n  _s();\n\n  /**\r\n   * here we define the state of this component\r\n   * this state will also contain the controlling variables\r\n   * of each of its child components\r\n   * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState, gameStatus ]\r\n   * we use a set for the previous letters because we want these values to be distinct\r\n   * when we set the state, we want to grab a random word from our dictionary and set it here\r\n   */\n  const [displayContent, setDisplayContent] = useState(() => {\n    const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\n    return [Array.from(word), new Set(), 0, gameStatus[0]];\n  }); //a function that can be called to check whether the user has won or lost\n\n  const checkGameStatus = tempDisplayContent => {\n    /**\r\n     * if the hangman state is equal to 10, the user has lost\r\n     * if the word array contains all of the letters from the \r\n     * previous letters array then the user has one\r\n     */\n    if (tempDisplayContent[2] === 10) {\n      tempDisplayContent[3] = gameStatus[2];\n    } else if (Array.from(tempDisplayContent[0]).every(letter => tempDisplayContent[1].has(letter))) {\n      tempDisplayContent[3] = gameStatus[1];\n    }\n\n    return tempDisplayContent;\n  }; //a function that will handle all of the user's keyboard input\n\n\n  const handleKeyDown = event => {\n    /**\r\n     * we want to take the key event and only add a capital \r\n     * letter version of the user's input if the input is a single letter\r\n     */\n    const keyPressed = event.key.toUpperCase();\n    const tempDisplayContent = displayContent.slice();\n\n    if (keyPressed.length === 1 && keyPressed.match(/[A-Z]/) && tempDisplayContent[3] === gameStatus[0]) {\n      /**\r\n       * we need to set the previous letters set to a new set to remove the reference\r\n       * we can then safely record the keystroke\r\n       */\n      tempDisplayContent[1] = new Set(tempDisplayContent[1]);\n      tempDisplayContent[1].add(keyPressed);\n      /**\r\n      * now that we know the keypress is only one letter,\r\n      * we need to check if the letter was correct or not\r\n      * if it was incorrect, we want to go to the next hangman state\r\n      */\n\n      if (!displayContent[0].includes(keyPressed) && !displayContent[1].has(keyPressed)) {\n        tempDisplayContent[2] = tempDisplayContent[2] + 1;\n      }\n    }\n\n    setDisplayContent(checkGameStatus(tempDisplayContent));\n  }; //a function that will check the current state and display the game status\n\n\n  const infoHeader = () => {\n    switch (displayContent[3]) {\n      //in progress case\n      case gameStatus[0]:\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"GAME IN PROGRESS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }, this);\n      //winning case\n\n      case gameStatus[1]:\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"win\",\n          children: \"YOU WON!!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this);\n      //losing case\n\n      case gameStatus[2]:\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"loss\",\n          children: \"SORRY... YOU LOSE...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 24\n        }, this);\n      //invalid case\n\n      default:\n        return null;\n    }\n  };\n  /**\r\n   * we need to create an event listener on the whole page\r\n   * in order to do this, we will use the useEffect component so that we can create\r\n   * the event listener as the component renders and then clean up the event listener\r\n   * after the component is disposed of\r\n   */\n\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"refresh-btn\",\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(QuestionCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: displayContent[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-content\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: infoHeader()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"display-row\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"display-column\",\n            children: /*#__PURE__*/_jsxDEV(PreviousLetters, {\n              letters: Array.from(displayContent[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"display-column\",\n            children: /*#__PURE__*/_jsxDEV(HangmanState, {\n              state: displayContent[2]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"display-row\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            wordLetters: displayContent[0],\n            previousLetters: Array.from(displayContent[1])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Display, \"+AubmISeMmurxouV+bVIFK/bmAE=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["C:/Source Repo/Projects/Level 3/Task 21/hangman/src/components/Display/Display.js"],"names":["Row","Col","Button","Container","PreviousLetters","HangmanState","React","useState","Input","dictionary","QuestionCircle","gameStatus","Display","displayContent","setDisplayContent","word","Math","floor","random","length","toUpperCase","Array","from","Set","checkGameStatus","tempDisplayContent","every","letter","has","handleKeyDown","event","keyPressed","key","slice","match","add","includes","infoHeader","useEffect","window","addEventListener","removeEventListener"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,eAAP;AACA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,iBAA5C;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CAEA;;;AACA,MAAMC,UAAU,GAAG,CAAC,aAAD,EAAgB,KAAhB,EAAuB,MAAvB,CAAnB;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,MAAM;AACvD,UAAMQ,IAAI,GAAGN,UAAU,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,UAAU,CAACU,MAAtC,CAAD,CAAV,CAA0DC,WAA1D,EAAb;AACA,WAAO,CAACC,KAAK,CAACC,IAAN,CAAWP,IAAX,CAAD,EAAmB,IAAIQ,GAAJ,EAAnB,EAA8B,CAA9B,EAAiCZ,UAAU,CAAC,CAAD,CAA3C,CAAP;AACH,GAHmD,CAApD,CATe,CAcf;;AACA,QAAMa,eAAe,GAAIC,kBAAD,IAAwB;AAC5C;AACR;AACA;AACA;AACA;AACQ,QAAIA,kBAAkB,CAAC,CAAD,CAAlB,KAA0B,EAA9B,EAAkC;AAC9BA,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,GAAwBd,UAAU,CAAC,CAAD,CAAlC;AACH,KAFD,MAGK,IAAIU,KAAK,CAACC,IAAN,CAAWG,kBAAkB,CAAC,CAAD,CAA7B,EAAkCC,KAAlC,CAAwCC,MAAM,IAAIF,kBAAkB,CAAC,CAAD,CAAlB,CAAsBG,GAAtB,CAA0BD,MAA1B,CAAlD,CAAJ,EAA0F;AAC3FF,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,GAAwBd,UAAU,CAAC,CAAD,CAAlC;AACH;;AAED,WAAOc,kBAAP;AACH,GAdD,CAfe,CA+Bf;;;AACA,QAAMI,aAAa,GAAIC,KAAD,IAAW;AAC7B;AACR;AACA;AACA;AACQ,UAAMC,UAAU,GAAGD,KAAK,CAACE,GAAN,CAAUZ,WAAV,EAAnB;AACA,UAAMK,kBAAkB,GAAGZ,cAAc,CAACoB,KAAf,EAA3B;;AAEA,QAAIF,UAAU,CAACZ,MAAX,KAAsB,CAAtB,IAA2BY,UAAU,CAACG,KAAX,CAAiB,OAAjB,CAA3B,IAAwDT,kBAAkB,CAAC,CAAD,CAAlB,KAA0Bd,UAAU,CAAC,CAAD,CAAhG,EAAqG;AACjG;AACZ;AACA;AACA;AACYc,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,GAAwB,IAAIF,GAAJ,CAAQE,kBAAkB,CAAC,CAAD,CAA1B,CAAxB;AACAA,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,CAAsBU,GAAtB,CAA0BJ,UAA1B;AAEA;AACZ;AACA;AACA;AACA;;AACY,UAAI,CAAClB,cAAc,CAAC,CAAD,CAAd,CAAkBuB,QAAlB,CAA2BL,UAA3B,CAAD,IAA2C,CAAClB,cAAc,CAAC,CAAD,CAAd,CAAkBe,GAAlB,CAAsBG,UAAtB,CAAhD,EAAmF;AAC/EN,QAAAA,kBAAkB,CAAC,CAAD,CAAlB,GAAwBA,kBAAkB,CAAC,CAAD,CAAlB,GAAwB,CAAhD;AACH;AACJ;;AAEDX,IAAAA,iBAAiB,CAACU,eAAe,CAACC,kBAAD,CAAhB,CAAjB;AACH,GA3BD,CAhCe,CA6Df;;;AACA,QAAMY,UAAU,GAAG,MAAM;AACrB,YAAQxB,cAAc,CAAC,CAAD,CAAtB;AACI;AACA,WAAKF,UAAU,CAAC,CAAD,CAAf;AACI,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACJ;;AACA,WAAKA,UAAU,CAAC,CAAD,CAAf;AACI,4BAAO;AAAI,UAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACJ;;AACA,WAAKA,UAAU,CAAC,CAAD,CAAf;AACI,4BAAO;AAAI,UAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACJ;;AACA;AACI,eAAO,IAAP;AAZR;AAcH,GAfD;AAiBA;AACJ;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCX,aAAnC;AAEA,WAAO,MAAM;AACTU,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCZ,aAAtC;AACH,KAFD;AAGH,GAND;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BAAM,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAKhB,cAAc,CAAC,CAAD;AAAnB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,SAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI,QAAC,GAAD;AAAA,oBACKwB,UAAU;AADf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,mCAAgC,QAAC,eAAD;AAAiB,cAAA,OAAO,EAAEhB,KAAK,CAACC,IAAN,CAAWT,cAAc,CAAC,CAAD,CAAzB;AAA1B;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,mCAAgC,QAAC,YAAD;AAAc,cAAA,KAAK,EAAEA,cAAc,CAAC,CAAD;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAUI,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACI,QAAC,KAAD;AAAO,YAAA,WAAW,EAAEA,cAAc,CAAC,CAAD,CAAlC;AAAuC,YAAA,eAAe,EAAEQ,KAAK,CAACC,IAAN,CAAWT,cAAc,CAAC,CAAD,CAAzB;AAAxD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GApHQD,O;;KAAAA,O;AAsHT,eAAeA,OAAf","sourcesContent":["/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\r\nimport './Display.css';\r\nimport { Row, Col, Button, Container } from 'react-bootstrap';\r\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\r\nimport HangmanState from '../HangmanState/HangmanState';\r\nimport React, { useState } from 'react';\r\nimport Input from '../Input/Input';\r\nimport dictionary from '../../assets/dictionary';\r\nimport { QuestionCircle } from 'react-bootstrap-icons';\r\n\r\n//a variable to contain possible game statuses\r\nconst gameStatus = ['in_progress', 'win', 'loss'];\r\n\r\nfunction Display() {\r\n    /**\r\n     * here we define the state of this component\r\n     * this state will also contain the controlling variables\r\n     * of each of its child components\r\n     * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState, gameStatus ]\r\n     * we use a set for the previous letters because we want these values to be distinct\r\n     * when we set the state, we want to grab a random word from our dictionary and set it here\r\n     */\r\n    const [displayContent, setDisplayContent] = useState(() => {\r\n        const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\r\n        return [Array.from(word), new Set(), 0, gameStatus[0]];\r\n    });\r\n\r\n    //a function that can be called to check whether the user has won or lost\r\n    const checkGameStatus = (tempDisplayContent) => {\r\n        /**\r\n         * if the hangman state is equal to 10, the user has lost\r\n         * if the word array contains all of the letters from the \r\n         * previous letters array then the user has one\r\n         */\r\n        if (tempDisplayContent[2] === 10) {\r\n            tempDisplayContent[3] = gameStatus[2];\r\n        }\r\n        else if (Array.from(tempDisplayContent[0]).every(letter => tempDisplayContent[1].has(letter))) {\r\n            tempDisplayContent[3] = gameStatus[1];\r\n        }\r\n\r\n        return tempDisplayContent;\r\n    }\r\n\r\n    //a function that will handle all of the user's keyboard input\r\n    const handleKeyDown = (event) => {\r\n        /**\r\n         * we want to take the key event and only add a capital \r\n         * letter version of the user's input if the input is a single letter\r\n         */\r\n        const keyPressed = event.key.toUpperCase();\r\n        const tempDisplayContent = displayContent.slice();\r\n\r\n        if (keyPressed.length === 1 && keyPressed.match(/[A-Z]/) && tempDisplayContent[3] === gameStatus[0]) {\r\n            /**\r\n             * we need to set the previous letters set to a new set to remove the reference\r\n             * we can then safely record the keystroke\r\n             */\r\n            tempDisplayContent[1] = new Set(tempDisplayContent[1]);\r\n            tempDisplayContent[1].add(keyPressed);\r\n\r\n            /**\r\n            * now that we know the keypress is only one letter,\r\n            * we need to check if the letter was correct or not\r\n            * if it was incorrect, we want to go to the next hangman state\r\n            */\r\n            if (!displayContent[0].includes(keyPressed) && !displayContent[1].has(keyPressed)) {\r\n                tempDisplayContent[2] = tempDisplayContent[2] + 1;\r\n            }\r\n        }\r\n\r\n        setDisplayContent(checkGameStatus(tempDisplayContent));\r\n    };\r\n\r\n    //a function that will check the current state and display the game status\r\n    const infoHeader = () => {\r\n        switch (displayContent[3]) {\r\n            //in progress case\r\n            case gameStatus[0]:\r\n                return <h1>GAME IN PROGRESS</h1>;\r\n            //winning case\r\n            case gameStatus[1]:\r\n                return <h1 className='win'>YOU WON!!!</h1>;\r\n            //losing case\r\n            case gameStatus[2]:\r\n                return <h1 className='loss'>SORRY... YOU LOSE...</h1>;\r\n            //invalid case\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * we need to create an event listener on the whole page\r\n     * in order to do this, we will use the useEffect component so that we can create\r\n     * the event listener as the component renders and then clean up the event listener\r\n     * after the component is disposed of\r\n     */\r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className='main-content'>\r\n            <Button className='refresh-btn'>Refresh</Button>\r\n            <span><QuestionCircle /></span>\r\n            <h1>{displayContent[0]}</h1>\r\n            <Container>\r\n                <div className='display-content'>\r\n                    <Row>\r\n                        {infoHeader()}\r\n                    </Row>\r\n                    <Row className='display-row'>\r\n                        <Col className='spacer' />\r\n                        <Col className='display-column'><PreviousLetters letters={Array.from(displayContent[1])} /></Col>\r\n                        <Col className='display-column'><HangmanState state={displayContent[2]} /></Col>\r\n                        <Col className='spacer' />\r\n                    </Row>\r\n                    <Row className='display-row'>\r\n                        <Input wordLetters={displayContent[0]} previousLetters={Array.from(displayContent[1])} />\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;"]},"metadata":{},"sourceType":"module"}