{"ast":null,"code":"var _jsxFileName = \"C:\\\\Source Repo\\\\Projects\\\\Level 3\\\\Task 21\\\\hangman\\\\src\\\\components\\\\Display\\\\Display.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\nimport './Display.css';\nimport { Row, Col } from 'react-bootstrap';\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\nimport HangmanState from '../HangmanState/HangmanState';\nimport { useState } from 'react';\nimport Input from '../Input/Input';\nimport dictionary from '../../assets/dictionary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display() {\n  _s();\n\n  /**\r\n   * here we define the state of this component\r\n   * this state will also contain the controlling variables\r\n   * of each of its child components\r\n   * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n   * we use a set for the previous letters because we want these values to be distinct\r\n   * when we set the state, we want to grab a random word from our dictionary and set it here\r\n   */\n  const [displayContent, setDisplayContent] = useState(() => {\n    const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\n    return [Array.from(word), new Set(), 0];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"display-content\",\n    tabIndex: 0,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"display-row\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        className: \"spacer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"display-column\",\n        children: /*#__PURE__*/_jsxDEV(PreviousLetters, {\n          letters: Array.from(displayContent[1])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"display-column\",\n        children: /*#__PURE__*/_jsxDEV(HangmanState, {\n          state: displayContent[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        className: \"spacer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"display-row\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        wordLetters: displayContent[0],\n        previousLetters: []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Display, \"2GyAEZ3FD3jHUKbIEb9xkjG3mIw=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["C:/Source Repo/Projects/Level 3/Task 21/hangman/src/components/Display/Display.js"],"names":["Row","Col","PreviousLetters","HangmanState","useState","Input","dictionary","Display","displayContent","setDisplayContent","word","Math","floor","random","length","toUpperCase","Array","from","Set"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,eAAP;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,MAAM;AACvD,UAAMM,IAAI,GAAGJ,UAAU,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,UAAU,CAACQ,MAAtC,CAAD,CAAV,CAA0DC,WAA1D,EAAb;AAEA,WAAO,CAACC,KAAK,CAACC,IAAN,CAAWP,IAAX,CAAD,EAAmB,IAAIQ,GAAJ,EAAnB,EAA8B,CAA9B,CAAP;AACH,GAJmD,CAApD;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,QAAQ,EAAE,CAA3C;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BAAgC,QAAC,eAAD;AAAiB,UAAA,OAAO,EAAEF,KAAK,CAACC,IAAN,CAAWT,cAAc,CAAC,CAAD,CAAzB;AAA1B;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BAAgC,QAAC,YAAD;AAAc,UAAA,KAAK,EAAEA,cAAc,CAAC,CAAD;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAEA,cAAc,CAAC,CAAD,CAAlC;AAAuC,QAAA,eAAe,EAAE;AAAxD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA5BQD,O;;KAAAA,O;AA8BT,eAAeA,OAAf","sourcesContent":["/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\r\nimport './Display.css';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\r\nimport HangmanState from '../HangmanState/HangmanState';\r\nimport { useState } from 'react';\r\nimport Input from '../Input/Input';\r\nimport dictionary from '../../assets/dictionary';\r\n\r\nfunction Display() {\r\n    /**\r\n     * here we define the state of this component\r\n     * this state will also contain the controlling variables\r\n     * of each of its child components\r\n     * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n     * we use a set for the previous letters because we want these values to be distinct\r\n     * when we set the state, we want to grab a random word from our dictionary and set it here\r\n     */\r\n    const [displayContent, setDisplayContent] = useState(() => {\r\n        const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\r\n\r\n        return [Array.from(word), new Set(), 0 ];\r\n    });\r\n\r\n    return (\r\n        <div className='display-content' tabIndex={0}>\r\n            <Row className='display-row'>\r\n                <Col className='spacer' />\r\n                <Col className='display-column'><PreviousLetters letters={Array.from(displayContent[1])} /></Col>\r\n                <Col className='display-column'><HangmanState state={displayContent[2]} /></Col>\r\n                <Col className='spacer' />\r\n            </Row>\r\n            <Row className='display-row'>\r\n                <Input wordLetters={displayContent[0]} previousLetters={[]}/>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;"]},"metadata":{},"sourceType":"module"}