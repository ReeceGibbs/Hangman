{"ast":null,"code":"var _jsxFileName = \"C:\\\\Source Repo\\\\Projects\\\\Level 3\\\\Task 21\\\\hangman\\\\src\\\\components\\\\Display\\\\Display.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\nimport './Display.css';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\nimport HangmanState from '../HangmanState/HangmanState';\nimport { useState } from 'react';\nimport Input from '../Input/Input';\nimport dictionary from '../../assets/dictionary';\nimport { QuestionCircle } from 'react-bootstrap-icons';\nimport FocusLock from 'react-focus-lock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display() {\n  _s();\n\n  /**\r\n   * here we define the state of this component\r\n   * this state will also contain the controlling variables\r\n   * of each of its child components\r\n   * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n   * we use a set for the previous letters because we want these values to be distinct\r\n   * when we set the state, we want to grab a random word from our dictionary and set it here\r\n   * we use a focus lock component to make sure that all keyboard inputs are read this component can be found here: https://www.npmjs.com/package/react-focus-lock\r\n   */\n  const [displayContent, setDisplayContent] = useState(() => {\n    const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\n    return [Array.from(word), new Set(), 0];\n  }); //a function that will handle all of the user's keyboard input\n\n  const handleKeyPress = event => {\n    console.log('fired');\n  };\n\n  return /*#__PURE__*/_jsxDEV(FocusLock, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      tabIndex: 0,\n      onKeyPress: handleKeyPress,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"refresh-btn\",\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(QuestionCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"display-content\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            className: \"display-row\",\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              className: \"spacer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              className: \"display-column\",\n              children: /*#__PURE__*/_jsxDEV(PreviousLetters, {\n                letters: Array.from(displayContent[1])\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              className: \"display-column\",\n              children: /*#__PURE__*/_jsxDEV(HangmanState, {\n                state: displayContent[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              className: \"spacer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"display-row\",\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              wordLetters: displayContent[0],\n              previousLetters: []\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Display, \"eagkRARqNAMJeC1l4SjETF2zIr8=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["C:/Source Repo/Projects/Level 3/Task 21/hangman/src/components/Display/Display.js"],"names":["Row","Col","Button","Container","PreviousLetters","HangmanState","useState","Input","dictionary","QuestionCircle","FocusLock","Display","displayContent","setDisplayContent","word","Math","floor","random","length","toUpperCase","Array","from","Set","handleKeyPress","event","console","log"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,eAAP;AACA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,iBAA5C;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,MAAM;AACvD,UAAMQ,IAAI,GAAGN,UAAU,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,UAAU,CAACU,MAAtC,CAAD,CAAV,CAA0DC,WAA1D,EAAb;AAEA,WAAO,CAACC,KAAK,CAACC,IAAN,CAAWP,IAAX,CAAD,EAAmB,IAAIQ,GAAJ,EAAnB,EAA8B,CAA9B,CAAP;AACH,GAJmD,CAApD,CAVe,CAgBf;;AACA,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFD;;AAIA,sBACI,QAAC,SAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,QAAQ,EAAE,CAAxC;AAA2C,MAAA,UAAU,EAAEH,cAAvD;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BAAM,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,SAAD;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACI,QAAC,GAAD;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,GAAD;AAAK,cAAA,SAAS,EAAC,gBAAf;AAAA,qCAAgC,QAAC,eAAD;AAAiB,gBAAA,OAAO,EAAEH,KAAK,CAACC,IAAN,CAAWT,cAAc,CAAC,CAAD,CAAzB;AAA1B;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,QAAC,GAAD;AAAK,cAAA,SAAS,EAAC,gBAAf;AAAA,qCAAgC,QAAC,YAAD;AAAc,gBAAA,KAAK,EAAEA,cAAc,CAAC,CAAD;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII,QAAC,GAAD;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAOI,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCACI,QAAC,KAAD;AAAO,cAAA,WAAW,EAAEA,cAAc,CAAC,CAAD,CAAlC;AAAuC,cAAA,eAAe,EAAE;AAAxD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GA1CQD,O;;KAAAA,O;AA4CT,eAAeA,OAAf","sourcesContent":["/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\r\nimport './Display.css';\r\nimport { Row, Col, Button, Container } from 'react-bootstrap';\r\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\r\nimport HangmanState from '../HangmanState/HangmanState';\r\nimport { useState } from 'react';\r\nimport Input from '../Input/Input';\r\nimport dictionary from '../../assets/dictionary';\r\nimport { QuestionCircle } from 'react-bootstrap-icons';\r\nimport FocusLock from 'react-focus-lock';\r\n\r\nfunction Display() {\r\n    /**\r\n     * here we define the state of this component\r\n     * this state will also contain the controlling variables\r\n     * of each of its child components\r\n     * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n     * we use a set for the previous letters because we want these values to be distinct\r\n     * when we set the state, we want to grab a random word from our dictionary and set it here\r\n     * we use a focus lock component to make sure that all keyboard inputs are read this component can be found here: https://www.npmjs.com/package/react-focus-lock\r\n     */\r\n    const [displayContent, setDisplayContent] = useState(() => {\r\n        const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\r\n\r\n        return [Array.from(word), new Set(), 0];\r\n    });\r\n\r\n    //a function that will handle all of the user's keyboard input\r\n    const handleKeyPress = (event) => {\r\n        console.log('fired');\r\n    };\r\n\r\n    return (\r\n        <FocusLock>\r\n            <div className='main-content' tabIndex={0} onKeyPress={handleKeyPress}>\r\n                <Button className='refresh-btn'>Refresh</Button>\r\n                <span><QuestionCircle /></span>\r\n                <Container>\r\n                    <div className='display-content'>\r\n                        <Row className='display-row'>\r\n                            <Col className='spacer' />\r\n                            <Col className='display-column'><PreviousLetters letters={Array.from(displayContent[1])} /></Col>\r\n                            <Col className='display-column'><HangmanState state={displayContent[2]} /></Col>\r\n                            <Col className='spacer' />\r\n                        </Row>\r\n                        <Row className='display-row'>\r\n                            <Input wordLetters={displayContent[0]} previousLetters={[]} />\r\n                        </Row>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        </FocusLock>\r\n    );\r\n}\r\n\r\nexport default Display;"]},"metadata":{},"sourceType":"module"}