{"ast":null,"code":"var _jsxFileName = \"C:\\\\Source Repo\\\\Projects\\\\Level 3\\\\Task 21\\\\hangman\\\\src\\\\components\\\\Display\\\\Display.js\",\n    _s = $RefreshSig$();\n\n/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\nimport './Display.css';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\nimport HangmanState from '../HangmanState/HangmanState';\nimport React, { useState } from 'react';\nimport Input from '../Input/Input';\nimport dictionary from '../../assets/dictionary';\nimport { QuestionCircle } from 'react-bootstrap-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display() {\n  _s();\n\n  /**\r\n   * here we define the state of this component\r\n   * this state will also contain the controlling variables\r\n   * of each of its child components\r\n   * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n   * we use a set for the previous letters because we want these values to be distinct\r\n   * when we set the state, we want to grab a random word from our dictionary and set it here\r\n   */\n  const [displayContent, setDisplayContent] = useState(() => {\n    const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\n    return [Array.from(word), new Set(), 0];\n  }); //a function that will handle all of the user's keyboard input\n\n  const handleKeyDown = event => {\n    /**\r\n     * we want to take the key event and only add a capital \r\n     * letter version of the user's input if the input is a single letter\r\n     */\n    const tempDisplayContent = displayContent.slice();\n\n    if (event.key.length === 1) {\n      tempDisplayContent[1].add(event.key.toUpperCase());\n    }\n\n    setDisplayContent(tempDisplayContent);\n    console.log(displayContent[1]);\n  };\n  /**\r\n   * we need to create an event listener on the whole page\r\n   * in order to do this, we will use the useEffect component so that we can create\r\n   * the event listener as the component renders and then clean up the event listener\r\n   * after the component is disposed of\r\n   */\n\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"refresh-btn\",\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(QuestionCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: displayContent[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-content\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"display-row\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"display-column\",\n            children: /*#__PURE__*/_jsxDEV(PreviousLetters, {\n              letters: Array.from(displayContent[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"display-column\",\n            children: /*#__PURE__*/_jsxDEV(HangmanState, {\n              state: displayContent[2]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"display-row\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            wordLetters: displayContent[0],\n            previousLetters: []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Display, \"3iMR5l8qQE4IHzK1f9pNF8411YE=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["C:/Source Repo/Projects/Level 3/Task 21/hangman/src/components/Display/Display.js"],"names":["Row","Col","Button","Container","PreviousLetters","HangmanState","React","useState","Input","dictionary","QuestionCircle","Display","displayContent","setDisplayContent","word","Math","floor","random","length","toUpperCase","Array","from","Set","handleKeyDown","event","tempDisplayContent","slice","key","add","console","log","useEffect","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["/**\r\n * this component will be used to display the user's progress in the game\r\n * each time the user guesses a letter incorrectly, this will display will update to reflect that\r\n */\r\nimport './Display.css';\r\nimport { Row, Col, Button, Container } from 'react-bootstrap';\r\nimport PreviousLetters from './../PreviousLetters/PreviousLetters';\r\nimport HangmanState from '../HangmanState/HangmanState';\r\nimport React, { useState } from 'react';\r\nimport Input from '../Input/Input';\r\nimport dictionary from '../../assets/dictionary';\r\nimport { QuestionCircle } from 'react-bootstrap-icons';\r\n\r\nfunction Display() {\r\n    /**\r\n     * here we define the state of this component\r\n     * this state will also contain the controlling variables\r\n     * of each of its child components\r\n     * the state list is in the format: [ wordLettersList , previousLettersList, initialHangmanState ]\r\n     * we use a set for the previous letters because we want these values to be distinct\r\n     * when we set the state, we want to grab a random word from our dictionary and set it here\r\n     */\r\n    const [displayContent, setDisplayContent] = useState(() => {\r\n        const word = dictionary[Math.floor(Math.random() * dictionary.length)].toUpperCase();\r\n\r\n        return [Array.from(word), new Set(), 0];\r\n    });\r\n\r\n    //a function that will handle all of the user's keyboard input\r\n    const handleKeyDown = (event) => {\r\n        /**\r\n         * we want to take the key event and only add a capital \r\n         * letter version of the user's input if the input is a single letter\r\n         */\r\n        const tempDisplayContent = displayContent.slice();\r\n\r\n        if (event.key.length === 1) {\r\n            tempDisplayContent[1].add(event.key.toUpperCase());\r\n        }\r\n\r\n        setDisplayContent(tempDisplayContent);\r\n\r\n        console.log(displayContent[1]);\r\n    };\r\n\r\n    /**\r\n     * we need to create an event listener on the whole page\r\n     * in order to do this, we will use the useEffect component so that we can create\r\n     * the event listener as the component renders and then clean up the event listener\r\n     * after the component is disposed of\r\n     */\r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className='main-content'>\r\n            <Button className='refresh-btn'>Refresh</Button>\r\n            <span><QuestionCircle /></span>\r\n            <h1>{displayContent[0]}</h1>\r\n            <Container>\r\n                <div className='display-content'>\r\n                    <Row className='display-row'>\r\n                        <Col className='spacer' />\r\n                        <Col className='display-column'><PreviousLetters letters={Array.from(displayContent[1])} /></Col>\r\n                        <Col className='display-column'><HangmanState state={displayContent[2]} /></Col>\r\n                        <Col className='spacer' />\r\n                    </Row>\r\n                    <Row className='display-row'>\r\n                        <Input wordLetters={displayContent[0]} previousLetters={[]} />\r\n                    </Row>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;"]},"metadata":{},"sourceType":"module"}